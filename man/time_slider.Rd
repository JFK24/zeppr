% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/time_series_tool.R
\name{time_slider}
\alias{time_slider}
\title{Aggregates numerical values over a sliding and flexible time window.}
\usage{
time_slider(
  values,
  times,
  expr = "sum(., na.rm=TRUE)",
  window_type = "yday",
  fixed_date = NA,
  before_val = NA,
  before_unit = "days",
  start_yday = 1,
  start_month = NA,
  start_day = NA,
  complete = TRUE
)
}
\arguments{
\item{values}{(numeric) vector of values to aggregate}

\item{times}{(Date) vector of dates indexing the vector of values}

\item{expr}{(chr) R expression representing a function call to aggregate
the values where '.' replaces the vector of values
(e.g. '\code{sum(., na.rm=TRUE)}', '\code{mean(., na.rm=TRUE)}', \code{dplyr::first(.)}')}

\item{window_type}{(chr) type of window among 'yday', 'start_values', 'before', and 'fixed'}

\item{fixed_date}{(Date) window start date for 'fixed' window type.
If provided as a vector of Date objects, the first object is selected as \code{fixed_date}.
It means that for grouped data frames, a column of starting dates can be passed
with different starting dates per groups (still, only the first date per group will be used).}

\item{before_val}{(int) window duration in units defined by \code{before_unit} for 'before' window type}

\item{before_unit}{(chr) window duration unit among 'days', 'weeks', 'months' and 'years' for 'before' window type}

\item{start_yday}{(int) start day of year number for 'yday' window type}

\item{start_month}{(int) start month number for 'start_values' window type}

\item{start_day}{(int) start day number in the start month for 'start_values' window type}

\item{complete}{(bool) returns NA for incomplete windows if TRUE,
proceed to computations ignoring missing window parts otherwise}
}
\value{
(numeric) a vector of same size as \code{values} where values at a given
position (positions defined by dates in the \code{times} vector) are replaced by
the aggregation statistic calculated on the time window.
The time window is defined from a start to an end date. While sliding over the
input \code{values} in the order defined by \code{times}, from the first to the last,
the window end is the current position and the window start depends on \code{window_type} as follows.
Window type \code{'fixed'}, the window starts at the date defined in \code{fixed_date}.
Window type \code{'before'}, the window starts at a relative number (\code{before_val})
of time units (\code{before_unit}) before the current position.
Window type \code{'start_values'}, the window starts at the last date (same year or year before)
for which the month and day are equal to \code{start_month} and \code{start_day}, respectively.
Window type \code{'yday'}, the window starts at the last date (same year or year before)
for which the day of the year is equal to \code{start_yday}.
}
\description{
The numerical values are defined in an input vector.
The values are iterated in the order given by a vector of corresponding dates.
The aggregation uses available functions returning a single value such as sum, mean, max.
The time window is defined from a date in the past to the currently iterated position in the vector.
Examples of usage would be to get the sum of values during
the last N days (see \code{window_type}='before', \code{before_val} and \code{before_unit}),
the average value since 1st January 2022 (see \code{window_type}='fixed', \code{fixed_date}),
the sum since last 15th October (see \code{window_type}='start_values', \code{start_month}, \code{start_day}),
or the maximun since the 101th day of the year (see \code{window_type}='yday', \code{start_yday})..
}
\examples{
times <- as.Date(as.Date("2021-12-28"):as.Date("2022-01-03"))
values <- c(10, 5, 8, 12, 6, 14, 11)
expr="sum(., na.rm=TRUE)"
time_slider(values, times, expr, "before", before_val='3', complete=TRUE)
time_slider(values, times, expr, "before", before_val='3', complete=FALSE)
time_slider(values, times, expr, "fixed", fixed_date='2021-12-29', complete=TRUE)
time_slider(values, times, expr, "start_values", start_month=12, start_day=29, complete=TRUE)
time_slider(values, times, expr, "yday", start_yday=363, complete=TRUE)
# Flexible start dates by groups in grouped data frames
group_labels <- c(rep("A",4), rep("B", 3))
start_times <- c(rep(as.Date("2021-12-28"),4), rep(as.Date("2022-01-01"), 3))
df <- data.frame(group=group_labels, time=times, start_time=start_times, value=values)
library(magrittr)
df \%>\%
  dplyr::group_by(group) \%>\%
  dplyr::mutate(my_sum=time_slider(
  value, time, expr, "fixed", fixed_date=start_time, complete=TRUE))
}
