% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/weather_indices.R
\name{mutate_past_day_temp_indices}
\alias{mutate_past_day_temp_indices}
\title{Adds Columns for Current or Past Daily Temperature Indices to a Data Frame}
\usage{
mutate_past_day_temp_indices(
  df,
  date,
  t.min,
  t.max,
  n.days = 1,
  from.month.day = NA,
  from.month = NA,
  from.date = NA,
  longest_period = FALSE,
  german.output = FALSE,
  suffix = "",
  no.suffix = FALSE,
  indices = c("ice", "frost", "vegetation", "heating", "summer", "tropical", "desertic")
)
}
\arguments{
\item{df}{(data.frame) a data.frame object with columns for date, min and
max temperatures (no missing values allowed)}

\item{date}{non-quoted column name containing dates (Date column)}

\item{t.min}{non-quoted column name containing minimum day temperatures (numeric column)}

\item{t.max}{non-quoted column name containing maximum day temperatures (numeric column)}

\item{n.days}{(integer) time window size in days (past and current days)}

\item{from.month.day}{(integer) past day in month to start counting
(if not \code{NA}, it overwrites \code{n.days}). To be defined together with \code{from.month}.
Year is not taken into account (may count past indices across several years).}

\item{from.month}{(integer) past month to start counting
(if not \code{NA}, it overwrites \code{n.days}). To be defined together with \code{from.month.day}.
Year is not taken into account (may count past indices across several years).}

\item{from.date}{(chr) past date to start counting (format: YYYY-MM-DD)
(if not \code{NA}, it overwrites \code{n.days}, \code{from.month.day} and \code{from.month})}

\item{longest_period}{(boolean) returns the maximal number of consecutive days
matching the index definition within the time window if TRUE, the number of
days matching the index definition within the time window otherwise.}

\item{german.output}{(boolean) returns column names in German if TRUE, in English otherwise}

\item{suffix}{(chr) string added at the end of new column names}

\item{no.suffix}{(boolean) keep simple col names if TRUE, add suffixes otherwise}

\item{indices}{(chr) vector of index names in English to add to the
data frame. All available indices are added by Default. Available indices:
"ice", "frost", "vegetation", "heating", "summer", "tropical", "desertic".}
}
\value{
(data.frame) table copying \code{df} but adding a numeric column for
each requested index: either the number of days matching the index definition
within the given time window, or the length of the longest time period within
the time window where days matched the index definition.
}
\description{
The input data frame must contain daily weather data (1 row per day) and
include columns for date, min and max temperatures. A new column will be
added for each requested temperature index. The daily data must be complete
(no missing or duplicated days) and sorted by date.
For a set of consecutive days (annotated by columns for dates, min and max
temperatures) and a given time window (smaller than the set), this function
calculates for each day either the number of days matching the definition of
a temperature index, or the longest period (smaller than the window) where
days matched the index definition. By default (time window of 1 day),
it will return 1 if a day match the definition of the index independently
from other days, 0 otherwise.
}
\details{
The time window is defined either by a number of days (accounting for the
current day and past days if required), a date in a year (a month and a
day of month; whatever the year), or a given full date (e.g. "2022-01-12").

Temperature indices are calculated by function \code{\link[=day_temp_index]{day_temp_index()}}.
The following indices can be calculated and summed up:
ice (\code{t.max}<0), frost (\code{t.min}<0), vegetation ((\code{t.max}+\code{t.min})/2)>=5),
heating ((\code{t.max}+\code{t.min})/2)<15), summer (\code{t.max}>=25),
tropical (\code{t.max}>=30) or desertic day (\code{t.max}>=35).
}
\examples{
data <- data.frame(
    Date=as.Date( c("2022-01-10", "2022-01-11", "2022-01-12",
                  "2022-01-13", "2022-01-14", "2022-01-15")),
    Tmin=c(-10, -1, 1, 15, 20, 6),
    Tmax=c(-1, 5, 5, 17, 25, 10))
# Annotate each day (1 if matching index definition, 0 otherwise)
mutate_past_day_temp_indices(data, Date, Tmin, Tmax, n.days=1)
# Annotate each day and get column names without suffixes
mutate_past_day_temp_indices(data, Date, Tmin, Tmax, n.days=1, no.suffix=TRUE)
# Count days matching index definition in the last 3 days
mutate_past_day_temp_indices(data, Date, Tmin, Tmax, n.days=3)
# maximal number of consecutive days matching index definition in the last 3 days
mutate_past_day_temp_indices(data, Date, Tmin, Tmax, n.days=3, longest_period=TRUE)
# Count days matching index definition since a given date in year (all years together)
mutate_past_day_temp_indices(data, Date, Tmin, Tmax, from.month=1, from.month.day=11)
# Count days matching index definition since a given date
mutate_past_day_temp_indices(data, Date, Tmin, Tmax, from.date="2022-01-12")
# Annotate each day with German column names (1 if matching index definition, 0 otherwise)
mutate_past_day_temp_indices(data, Date, Tmin, Tmax, german.output=TRUE)
# Annotate each day with selected indices
mutate_past_day_temp_indices(data, Date, Tmin, Tmax, indices=c("frost", "heating"))
# Use tidyverse-style pipes
library(magrittr)
data \%>\% mutate_past_day_temp_indices(Date, Tmin, Tmax)
}
